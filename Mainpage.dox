/**
@mainpage
<p>
FSDict is a collection of modules and command-line tools to efficiently store and access large dictionaries.

The following is a high-level breakdown of what FSDict offers:
<ul>
 <li><b>Compile very large dictionaries into highly-efficient finite-state data structures.</b> Obtain minimized deterministic finite state automata for word lists of tens of millions of keys, or larger. Those data structures can be dumped to hard disk and loaded into memory very quickly.</li>
 <li><b>Very fast dictionary lookup.</b> The dictionary automata allow for lookup operations in record time.</li>
 <li><b>Very fast aproximate search in dictionaries.</b> Retrieve all keys in the dictionary which are sufficiently similar to a given input word w.r.t. the Levenshtein distance measure.</li>
 <li><b>Highly efficient handling of rule-based spelling variants.</b> Special algorithms allow for the handling of rewrite rules to describe certain spelling variants, e.g. for historical spelling.</li>
</ul>

</p>
 What follows is a very short description of the most important classes.
<ul>
<li>fsdict::MinDic implements the  construction and usage of minimzed acyclic
 finite-state automata. Also read the @link minDic_manual MinDic manual @endlink</li>
<li>fsdict::MSMatch offers a very efficient method to extract correction candidates
for a garbled token from a huge lexicon. A command-line interface to this
class is documented in the @link msFilter_manual msFilter Manual @endlink</li>
<li>With fsdict::ErrDic and fsdict::createED so-called <em>Error Dictionaries</em> are created and used. 
They are powerful tools for the computation of error-profiles for a text.</li>
<li>fsdict::Vaam is a module to perform approximate lookups in large
 dictionaries, using a combination of standard Levenshtein distance and a
 user-defined set of rules for spelling variants. Besides the class reference,
 please read the @link vaam_manual Vaam Manual @endlink to get an idea of how
 to create a Vaam object, how to send queries and how to interpret Vaam's
 answer.</li>
<li>fsdict::DictSearch is a combined interface for approximate lookup with
MSMatch and variant-aware lookup with Vaam. The @link
dictSearch_manual DictSearch Manual@endlink explains how to use it.</li>
</ul>
<p>
<b>So far, none of the interfaces documented here are fixed or guaranteed to remain unchanged in future versions.</b><br>
</p>
<p>Feedback, bug reports or suggestions. Please mail to uli_at_reffle_dot_de</p>
<h3>Credits</h3>
The largest parts of this library were implemented at the <em><a href="http://www.cis.uni-muenchen.de">Centrum f√ºr Informations- und Sprachverarbeitung (CIS)</a></em> in Munich, Germany.<br>
Most of the algorithms, and also many implementation aspects, are really from the heads of Klaus Schulz (from CIS) and Stoyan Mihov from the Bulgarian Academy of Sciences.

@author Ulrich Reffle
*/
